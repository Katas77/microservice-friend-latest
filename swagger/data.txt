

 http://localhost:8080/api/v1/friends/b3999ffa-2df9-469e-9793-ee65e214846e/approve

http://localhost:8080/api/v1/friends/b3999ffa-2df9-469e-9793-ee65e214846e/request

http://localhost:8080/api/v1/friends/count

http://localhost:8080/api/v1/friends/5c1db40f-8ea8-4b43-9310-3f2357fb5536

http://localhost:8082/api/v1/default/hello

http://localhost:8082/api/v1/default/size





{
    "id": "4a001ad4-52e8-41d2-8170-c28705c765b5",
    "email": "eee@ru",
    "phone": null,
    "photo": null,
    "about": null,
    "city": null,
    "country": null,
    "statusCode": null,
    "firstName": "",
    "lastName": "",
    "regDate": "2024-12-04T13:22:32.227782",
    "birthDate": null,
    "messagePermission": null,
    "lastOnlineTime": "2024-12-04T13:22:32.227822",
    "isOnline": false,
    "isBlocked": false,
    "isDeleted": false,
    "photoId": null,
    "photoName": null,
    "role": null,
    "createdOn": "2024-12-04T13:22:33.531025",
    "updatedOn": "2024-12-04T13:22:33.531086",
    "password": null
}


SELECT * FROM friend_schema.friendship WHERE (friendship.account_id_to='b3999ffa-2df9-469e-9793-ee65e214846e' or friendship.account_id_from='b3999ffa-2df9-469e-9793-ee65e214846e') AND (friendship.account_id_to='4a001ad4-52e8-41d2-8170-c28705c765b5' or friendship.account_id_from='4a001ad4-52e8-41d2-8170-c28705c765b5')


    @PostConstruct
    public void great() {
        Random random = new Random();
        int b = random.nextInt(0, 3);
        StatusCode[] statusCodes = {StatusCode.FRIEND, StatusCode.BLOCKED, StatusCode.REQUEST_TO, StatusCode.SUBSCRIBED};
        Friendship friendship = Friendship.builder()
                .uuid(UUID.randomUUID())
                .account_id_to(UUID.randomUUID())
                .account_id_from(UUID.randomUUID())
                .statusBetween(statusCodes[b])
                .build();
        repository.save(friendship);
        Friendship friendship2 = Friendship.builder()
                .uuid(UUID.randomUUID())
                .account_id_to(UUID.randomUUID())
                .account_id_from(UUID.fromString("4a001ad4-52e8-41d2-8170-c28705c765b5"))
                .statusBetween(StatusCode.REQUEST_FROM)
                .build();
        repository.save(friendship2);

    }

package social.network.microservice_friend;/*

package social.network.microservice_friend;
import jakarta.ws.rs.core.Application;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

import org.springframework.boot.test.context.SpringBootTest;


import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;


import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@ExtendWith(SpringExtension.class)
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        classes = Application.class)
@AutoConfigureMockMvc
@TestPropertySource(
        locations = "classpath:application-integrationtest.properties")
@TestPropertySource(properties =
        "spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration")
public abstract class AbstractTestController {
    @Autowired
   protected MockMvc mockMvc;
    protected List<UUID> uuidList (UUID uuid1, UUID uuid2){
        List<UUID> uuidList=new ArrayList<>();
        uuidList.add(uuid1);
        uuidList.add(uuid2);
        return uuidList;
    }

}

*/
       <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.10</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jcc-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>






                        <plugin>
                            <groupId>org.sonarsource.scanner.maven</groupId>
                            <artifactId>sonar-maven-plugin</artifactId>
                            <version>4.0.0.4121</version>
                        </plugin>
